{
  "hash": "9751d85d0c716a7de03c5595e7bf50bd",
  "result": {
    "markdown": "---\ntitle: \"Welcome to RStudio Cloud!\"\nauthor: \"Your Names Go Here!\"\ndate: \"The Date Goes Here!\"\nformat: \n  html:\n    embed-resources: true\neditor: visual\nexecute:\n  message: false\n  warning: false\n  eval: false\n---\n\n\n## General information on Thursday labs\n\nEach Thursday you will complete a lab in class with your group. Questions are selected from each lab to be turned in on Canvas (one submission per group). The questions to be submitted on Canvas are bolded in the lab. As you work through the lab with your group have the Canvas lab assignment open so that you can answer those questions as you go. Today's activity is Lab 1 in Canvas for practice submitting as a group.\n\n## What is this document?\n\nThis is a Quarto document. Quarto is a simple formatting syntax for authoring HTML, PDF, and Microsoft Word documents.\n\nWe will always be using the \"Visual\" version of our Quarto document, which has options that should feel familiar.\n\n## R Code\n\nYou can differentiate the R code within a Quarto document from the body of the document, because it is contained in a grey box. Here is an example of an R code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## This is an R comment. R knows this IS NOT code because it has a # in front! \n## Code to load in packages we need\n\nlibrary(here)\n```\n:::\n\n\nThe Quarto document knows this code is R code because the first thing inside the curly braces (`{}`) is an `r`. The first line of code below the `{r}` is a code chunk option. You can tell something is a code chunk option because it starts with a hash-pipe (`#|`). This option gives the code chunk a label--`setup`. I like to name every code chunk with one word that represents what the code is doing. This also makes it easier to navigate between the different parts of your document!\n\nIf you wanted to insert a new R code chunk, you click on the \"Insert\" button, then select \"Code Chunk\", and finally select R.\n\n**Question 1: Insert a new R code chunk below this question. Inside the code chunk include the following code: `library(tidyverse)`**\n\n\n**Question 2: What do you think the `library()` function in the above code does?**\n\n**Question 3: What do you think the tidyverse is?**\n\n## Rendering\n\nWhen you click the **Render** button a document will be generated that includes **both** content of your document **and** any output from the R code chunks you included within the document.\n\n## Including Code \n\nYou can include code output in your knitted document:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpg)\n```\n:::\n\n\n**Question 4: What do you think the `glimpse()` function does?** \n\n*Hint: What type of output does it give you?*\n\n## Including Plots\n\nYou can also embed plots in the knitted document.\n\nHere is an example of a plot:\n\n\n::: {.cell}\n\n:::\n\n\n**Question 5: What do you think the `echo: false` option does in the above code chunk?**\n\n## Loading Data into `R`\n\nYou can load data files into R using functions from different packages. You will\nlearn that the function you use depends on what format the data are in. Today,\nwe will work with data that are stored in a Comma Separated Values file (a CSV).\nFor this format of data, we will use the `read_csv()` function to read in our data.\n\nThe data are located in the *data* folder of your project. To load in the data,\nwe need to specify the \"path\" to the data, or where R needs to look for the data.\nI like to use the `here()` function from the **here** package to read in data,\nbecause I find the format intuitive. I'll walk you through what the code below\nis doing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbroadway <- read_csv(\n  here(\"resources\", \n       \"data\", \n       \"broadway.csv\")\n                     )\n```\n:::\n\n\n-   `broadway` is the name of the object we are storing the dataset into\n-   The `<-` \"assigns\" the output of the `read_csv()` function into the\n`broadway` object\n-   `read_csv()` is a function that reads in our csv data file\n-   `here()` is a function that specifies where the data live\n-   `\"data\"` is the name of the folder the data live in\n-   `\"broadway.csv\"` is the name of the dataset\n\nClick on the `broadway` dataset in the upper righthand corner to open up a data\nviewer for you to look over the dataset.\n\n**Question 6: Based on your inspection of the data, what are the observations / cases in these data?**\n\n**Question 7: What are the variables in these data?**\n\n## Lab Submission\n\nOnce you are done answering every question in the lab, hit the \"Render\" button\nto create an HTML document with your answers. To submit your HTML on Canvas you\nneed to do the following:\n\n1.  Check the box next to lab1.html\n2.  Click on the \"More\" icon (with the gear by it)\n3.  Select \"Export...\"\n4.  You will be given an option to change the name of your document. I don't.\nSo, bypass this and click \"Download\".\n5.  Upload your downloaded Lab 1 file to the Lab 1 Canvas assignment\n",
    "supporting": [
      "stat1-lab-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}