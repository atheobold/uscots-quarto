{
  "hash": "1579fb4b55738f37658c63915c622578",
  "result": {
    "markdown": "---\nformat: \n  revealjs:\n    slide-number: false\n    transition: fade\n    height: 900\n    width: 1600\n    logo: \"images/cp_hex_logo.png\"\n    footer: \"[USCOTS Quarto Workshop](https://atheobold.github.io/uscots-quarto/)\"\n    theme: night\n    embed-resources: true\n    \neditor: source\n---\n\n\n##  {background-image=\"images/02-hamlet.jpeg\" background-position=\"left\"}\n\n::: {style=\"font-size: 8em; color: #34605f;\"}\nHello Quarto\n:::\n\n\n\n\n\n## What is Quarto?\n\n> Quarto® is an open-source scientific and technical publishing system built on Pandoc that aims to make the process of creating and collaborating dramatically better\n\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel, presented at RStudio Conference 2022. Illustrated by Allison Horst.](images/02-horst-quarto.png){fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\" fig-align=\"center\"}\n\n\n## Quarto\n\nWith Quarto you can weave together narrative text and code to produce elegantly formatted output as documents, web pages, blog posts, books and more.\n\n. . .\n\n<br>\n\n*just like R Markdown...*\n\n. . .\n\n<br>\n\nbut not *just like* it, there's more to it...\n\n## Quarto ... {.center auto-animate=\"true\"}\n\n**unifies** + **extends** the R Markdown ecosystem\n\n## Quarto ... {.center auto-animate=\"true\"}\n\n**unifies** + **extends** the R Markdown ecosystem\n\n<br>\n\n**unifies** for people who love R Markdown\n\n## Quarto ... {.center auto-animate=\"true\"}\n\n**unifies** + **extends** the R Markdown ecosystem\n\n<br>\n\n**unifies** for people who love R Markdown\n\n**extends** for people who don't know R Markdown\n\n\n## Quarto Unifies & Extends \n\n::: incremental\n- Consistent implementation of attractive and handy features across outputs\n- More accessible defaults as well as better support for accessibility\n- Guardrails, particularly helpful for new learners: YAML completion, code option completion\n- Support for other languages like Python, Julia, and more \n:::\n\n::: columns\n::: {.column width=\"35%\"}\n![](images/02-rmd_ecosystem.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"30%\"}\n:::\n\n::: {.column width=\"35%\"}\n</br>\n![](images/02-quarto_ball.png){fig-align=\"center\" width=\"30%\"}\n:::\n:::\n\n\n\n\n::: notes\n\nQuarto integrates what has been learned over the last 10-years from RMarkdown into **one** system for creating and publishing reproducible documents.\n\nThink of all the packages from the R Markdown universe that you've come to love and rely on over the years. Each package addresses a different need and offers a different output: for example, you can use blogdown or distill for creating websites and blogs, bookdown for writing a book, rticles for writing journal articles, etc.\n\nSuch a unification effort presents a fantastic opportunity to identify and address gaps functionality and inefficiencies in user experience, and the process of building Quarto has been no different.\n:::\n\n## Quarto makes moving between formats straightforward {.takeaway .center}\n\n::: columns\n::: {.column width=\"33%\"}\n::: fragment\nDocument\n\n::: {.code-file .sourceCode .cell-code}\n{{< fa file >}} lesson-1.qmd\n:::\n\n``` yaml\ntitle: \"Lesson 1\"\nformat: html\n```\n:::\n:::\n\n::: {.column width=\"33%\"}\n::: fragment\nPresentation\n\n::: {.code-file .sourceCode .cell-code}\n{{< fa file >}} lesson-1.qmd\n:::\n\n``` yaml\ntitle: \"Lesson 1\"\nformat: revealjs\n```\n:::\n:::\n\n::: {.column width=\"33%\"}\n::: fragment\nWebsite\n\n::: {.code-file .sourceCode .cell-code}\n{{< fa file >}} _quarto.yml\n:::\n\n``` yaml\nproject:\n  type: website\n\nwebsite: \n  navbar: \n    left:\n      - lesson-1.qmd\n```\n:::\n:::\n:::\n\n# `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:white;overflow:visible;position:relative;\"><path d=\"M64 96c0-35.3 28.7-64 64-64H512c35.3 0 64 28.7 64 64V352H512V96H128V352H64V96zM0 403.2C0 392.6 8.6 384 19.2 384H620.8c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8H76.8C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z\"/></svg>`{=html} Let's get started! {background-color=\"#447099\" transition=\"slide-in\"}\n\n- Open RStudio\n- Click on \"File\"\n- Select \"New File\"\n- Select \"Quarto Document\"\n  * Fill in the title and author\n  * Select HTML for the format option\n\n- Click \"Create\"!\n\n## A Quarto Document\n\n::: columns\n::: {.column width=\"50%\"}\n    ---\n    title: \"ggplot2 demo\"\n    author: \"Norah Jones\"\n    date: \"May 22nd, 2021\"\n    format: \n      html:\n        code-fold: true\n    ---\n\n    ## Air Quality\n\n    @fig-airquality further explores the impact of temperature \n      on ozone level.\n\n    ```{{r}}\n    #| label: fig-airquality\n    #| fig-cap: Temperature and ozone level.\n    #| warning: false\n\n    library(ggplot2)\n    ggplot(airquality, \n           mapping = aes(x = Temp, y = Ozone)\n           ) + \n\n      geom_point() + \n      geom_smooth(method = \"loess\"\n    )\n    ```\n:::\n\n::: {.column width=\"40%\"}\n![](https://quarto.org/images/hello-knitr.png)\n:::\n:::\n\n# Anatomy of a Quarto document\n\n## [YAML](https://yaml.org/) \n\n> processed in many stages of the rendering process and can influence the final document in many different ways. It is placed at the very beginning of the document and is read by each of Pandoc, Quarto and `knitr`. Along the way, the information that it contains can affect the code, content, and the rendering process.\n\n\n## Required Inputs\n\n. . .\n\n- What editor should be the default for working in the document?\n\n``` yaml\n---\neditor: visual\n---\n```\n\n</br>\n\n. . .\n\n* What format should the document render in?\n\n``` yaml\n---\nformat: html\n---\n```\n\n## \n\n::: borderbox\n![](images/02-rstudio-source-visual.png){fig-align=\"center\"}\n:::\n \n# Code\n\n\n## Anatomy of a code chunk\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: penguin-species\n#| message: false\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins |> \n  distinct(species)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 1\n  species  \n  <fct>    \n1 Adelie   \n2 Gentoo   \n3 Chinstrap\n```\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"50%\"}\n-   Has 3x backticks on each end\n-   Engine (`r`) is indicated between curly braces `{r}`\n-   Options stated with the `#|` (hashpipe): `#| option1: value`\n\n::: fragment\n::: {.callout-note}\n# Different from RMarkdown formatting!\n\nNotice the options here **are not** inside the `{}` but inside the code chunk! Where previously we had:\n\n```r\n{r, echo = FALSE, message = FALSE, fig.align = \"center\"}\n```\n\nnow we have: \n\n```r\n{r}\n#| echo: false\n#| message: false\n#| fig-align: center\n```\n\n:::\n:::\n:::\n:::\n\n\n# Text\n\n## Text Formatting\n\n> Quarto is based on Pandoc and uses its variation of markdown as its underlying document syntax. [Markdown](https://daringfireball.net/projects/markdown/) is a plain text format that is designed to be easy to write, and, even more importantly, easy to read\n\n</br>\n\n::: {style=\"font-size: 1.25em;\"}\n\n``` markdown\n# Heading 1\nThis is a sentence with some **bold text**, some *italic text* and an [image](image.png).\n```\n:::\n\n## Text Formatting\n\n</br>\n\n+-----------------------------------+-------------------------------+\n| Markdown Syntax                   | Output                        |\n+===================================+===============================+\n|     *italics* and **bold**        | *italics* and **bold**        |\n+-----------------------------------+-------------------------------+\n|     superscript^2^ / subscript~2~ | superscript^2^ / subscript~2~ |\n+-----------------------------------+-------------------------------+\n|     ~~strikethrough~~             | ~~strikethrough~~             |\n+-----------------------------------+-------------------------------+\n|     `verbatim code`               | `verbatim code`               |\n+-----------------------------------+-------------------------------+\n\n## Headings\n\n+---------------------+-----------------+\n| Markdown Syntax     | Output          |\n+=====================+=================+\n|     # Header 1      | # Header 1      |\n+---------------------+-----------------+\n|     ## Header 2     | ## Header 2     |\n+---------------------+-----------------+\n|     ### Header 3    | ### Header 3    |\n+---------------------+-----------------+\n|     #### Header 4   | #### Header 4   |\n+---------------------+-----------------+\n|     ##### Header 5  | ##### Header 5  |\n+---------------------+-----------------+\n|     ###### Header 6 | ###### Header 6 |\n+---------------------+-----------------+\n\n## Lists\n\nUnordered list:\n\n::: columns\n::: {.column width=\"50%\"}\n**Markdown:**\n\n``` markdown\n-   unordered list         \n    -   sub-item 1         \n    -   sub-item 1         \n        -   sub-sub-item 1 \n```\n:::\n\n::: {.column .fragment width=\"50%\" fragment-index=\"1\"}\n**Output**\n\n-   unordered list\n    -   sub-item 1\\\n    -   sub-item 1\n        -   sub-sub-item 1\n:::\n:::\n\nOrdered list:\n\n::: columns\n::: {.column width=\"50%\"}\n**Markdown:**\n\n``` markdown\n1. ordered list            \n2. item 2                  \n    i. sub-item 1          \n         A.  sub-sub-item 1\n```\n:::\n\n::: {.column .fragment width=\"50%\" fragment-index=\"2\"}\n**Output**\n\n1.  ordered list\\\n2.  item 2\n    i.  sub-item 1\n        A.  sub-sub-item 1\n:::\n:::\n\n# `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:white;overflow:visible;position:relative;\"><path d=\"M64 96c0-35.3 28.7-64 64-64H512c35.3 0 64 28.7 64 64V352H512V96H128V352H64V96zM0 403.2C0 392.6 8.6 384 19.2 384H620.8c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8H76.8C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z\"/></svg>`{=html} Your turn! {background-color=\"#447099\" transition=\"slide-in\"}\nUsing the visual editor, add the following to your Quarto document:\n\n- A title\n- Your name as the author\n- Two new sections\n  * One with fact you want to learn\n  * One with your favorite thing about R\n\n## Quarto workflow\n\nRendering a Quarto file in RStudio via the Render button calls `quarto render` in a **background job**, preventing Quarto rendering from cluttering up the R console, and gives you and easy way to stop the render process. \n\n</br>\n\nThere are a few different ways to render a Quarto file: \n\n. . .\n\n1.  Option 1: In RStudio as a background job, and preview the output.\n\n. . .\n\n2.  Option 2: In the Terminal via `quarto render`:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n:::\n\n\n. . .\n\n3.  Option 3: In the R console, via the `quarto` R package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquarto::quarto_render(\"document.qmd\") # defaults to html\nquarto::quarto_render(\"document.qmd\", output_format = \"pdf\")\n```\n:::\n\n\n# `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:white;overflow:visible;position:relative;\"><path d=\"M64 96c0-35.3 28.7-64 64-64H512c35.3 0 64 28.7 64 64V352H512V96H128V352H64V96zM0 403.2C0 392.6 8.6 384 19.2 384H620.8c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8H76.8C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z\"/></svg>`{=html} Your turn! {background-color=\"#447099\" transition=\"slide-in\"}\n- With the Quarto document you have open\n- Render your document using the RStudio \\> Render button\n- Then compare the behavior of rendering with either\n    -   the terminal using `quarto render`  or \n    -   the R console via `quarto::quarto_render()`\n\n\n## Additional YAML Options\n\n</br>\n\n``` yaml\n---\nformat: \n  html:\n    code-fold: true\n---\n```\n\n</br>\n\nNotice! \n\n* `html:` is now on a new line\n* this line is below `format:` **and** indented\n\n* the HTML formatting options are on their own line\n* these lines are below `html:` **and** indented\n\n\n# `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:white;overflow:visible;position:relative;\"><path d=\"M64 96c0-35.3 28.7-64 64-64H512c35.3 0 64 28.7 64 64V352H512V96H128V352H64V96zM0 403.2C0 392.6 8.6 384 19.2 384H620.8c10.6 0 19.2 8.6 19.2 19.2c0 42.4-34.4 76.8-76.8 76.8H76.8C34.4 480 0 445.6 0 403.2zM281 209l-31 31 31 31c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-48-48c-9.4-9.4-9.4-24.6 0-33.9l48-48c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9zM393 175l48 48c9.4 9.4 9.4 24.6 0 33.9l-48 48c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l31-31-31-31c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0z\"/></svg>`{=html} Your turn! {background-color=\"#447099\" transition=\"slide-in\"}\n\nThe exhaustive list of YAML options that can be used for HTML documents can be found here: <https://quarto.org/docs/reference/formats/html>. You can also get a drop down menu of all possible YAML options by hitting Try <kbd>`Ctrl + space`</kbd>.\n\n</br>\n\nUsing this resource add the following to your document:\n\n- code folding\n- a table of contents\n- is self-contained\n- all figures are center aligned\n- no messages wan execution option which suppresses messages output from R\n\n[Afterward, add at least one additional YAML option of your choosing!]{style=\"font-size: 1.25em; color: #e28743\"}\n\n<br>\n<br>\n<br>\n<br>\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}